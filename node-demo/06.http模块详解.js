// 什么时候用post？什么时候用get？，
// 1.严格的说，作为一名前端开发人员，我们是不是听从服务器端开发人员，
// 2.他们定义为post，就只能用post，用get请求也请求不通，。
// 3.作为一名前端能开发人员什么时候用get，什么时候用post，取决于服务器端开发人员。

// 但是我们是服务器端开发人员，我们什么时候开个get接口，什么时候开个post接口。
// 有的人认为，get直接放在url后面，post放在请求头，比get安全
// 其实，一点都不安全，为什么呢？
// 因为你在网络上传输，这些数据都是明文传输的。
// 咋们学习到后面的话，后面有个东西叫做抓包。
// 就是，只要你能够抓包，只要你能够抓到这个数据包，
// 都是明文的，我是不是就知道数据里面到底有那些东西。
// 
// 特别是做移动端，做app的同学。经常去抓一些数据接口，
// 只要我能抓到这个包，只要你的数据包是明文的，我就知道你传的是什么了。

// 所以，不管你是提交数据，还是从安全的角度去考虑
// 这些都不是决定你使用get接口还是post接口的原因。


// 使用什么接口，取决于这个接口要承担的数据量。
// 就是，如果你这个接口需要传输承担的数据量，
// 不管你是从客户端，往前后传输数据，还是往前端后台去发，
// 如果你的用户量超过了1kb，数据的传输量超过1kb都应该把数据接口
// 转换为post

// 为什么呢？
// 如果你把接口保存为get这种方式，往前端，传数据的话，
// 你往前端传数据，那也是一次性的把数据写进去，
// 而不是分流去写的。
// 如果你传的数据过大，你一次性传，一旦中间的大数据丢了，
// 丢了，你就得把这个数据完整的在传一遍。

// 这种损耗很大的，

// 举个例子：WiFi信号，风都能把WiFi信号给吹没了。
// 你们信吗？

// 风是能直接影响无线信号的，
// 因为无线信号，就是空气中电磁波的形式存在
// 如果你的风速度过快的话，会吹乱这个气流
// 本来电磁波在空气传播是一个平稳的，
// 那么风可能会把带电磁波的气流给吹翻了，吹偏了
// 数据丢了，
// 这就是丢包

// 如果说你客户端往前端往去发数据，用这种，
// 普通读写的形式往前端去发的话。
// 一旦丢包，丢了个大数据，这个完整的包，你得从头在传一遍
// 

// 那么，这种大数，如果你用post这种文件流的形式，
// 传输数据，一次只发64k，
// 对端你64k没有收到，行，针对你没收到的64k再发一次
// 这样传输效率就高了，

// 这种传输效率，要比你一次性把文件发送过去，要安全可靠得多。
// 这就是我们定义post和get接口的考量点。

// 如果你这个接口，传输数据量比较大，那你就用post。
// 如果你这个接口，传输数据量也就几k几k的，比较小的话，你就用get接口。











// HTTP模块详解
    // 获取接口     
        // url模块：专门用来处理url模块
        // 借助url模块下的parse方法，可以把字符串类型的路径转为对象
            // pathname属性：获取到请求的接口名
            // query属性：获取到get提交上来的参数
    // 根据请求接口发送对应的页面
        // 借助query属性获取：借助fs模块下的管道流操作，把页面文件从服务器中读取出来，写入res中。
            // 把要展示给用户的文件写在响应的res中，var rs= fs.createReadStream('post.html');rs.pipe(res);
    // 接收GET提交的参数
        // 借助query属性：在url.parse()方法的第二个参数中传true，可以把字符串类型的请求参数转换为对象类型
    // 接收POST提交的参数
        // 借助于管道流，从req对象中获取到提交上来的数据。
        // 借助于querystring模块下的parse方法，把字符串类型的参数转换为对象类型。
    // html文档中引入外部文件的处理办法
        // 当HTML文档中引用了外部文件会再次向服务器发送一次请求，需要针对这种请求给客户端返回响应的文件